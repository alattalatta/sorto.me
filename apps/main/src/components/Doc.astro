---
import type { Identifier } from '@mdn/browser-compat-data'
import type { AstroComponentFactory } from 'astro/runtime/server/index.js'
import { Image } from 'astro:assets'

import BrowserCompat from './BrowserCompat'
import { Deprecated, Experimental, NonStandard } from './BrowserCompat/StatusIcon'
import ContentBody from './ContentBody.astro'
import DocPin from './DocPin'
import DocsUnderPath from './DocsUnderPath.astro'
import LiveExample from './LiveExample'
import Spec from './Spec'
import Baseline from './Baseline.astro'

type MaybeArray<T> = T | T[]

type Props = {
  baseline: boolean
  bcd: MaybeArray<{ data: Identifier; fullKey: string; key: string } | null>
  content: AstroComponentFactory
  description: string
  pinnable: boolean
  slug: string
  title: string
}

const { baseline, bcd, content: Content, description, pinnable, slug, title } = Astro.props
const slugAsID = slug.replaceAll('/', '-')
---

{pinnable && <recent-doc description={description} title={title} />}
<article aria-labelledby={slugAsID}>
  <header>
    <div class="header-top">
      <h2 id={slugAsID}>
        {title}
      </h2>
      {
        pinnable && (
          <span class="pin">
            <DocPin client:load />
          </span>
        )
      }
    </div>
    {
      baseline && bcd && (
        <div class="baseline">
          <Baseline data={bcd} />
        </div>
      )
    }
  </header>
  <ContentBody
    bcd={bcd}
    components={{
      BrowserCompat,
      Deprecated,
      Experimental,
      Image,
      LiveExample,
      NonStandard,
      DocsUnderPath,
      Spec,
    }}
    content={Content}
  />
</article>

<style lang="scss">
  header {
    padding: 2rem 3rem;

    @media (max-width: 1088px) {
      padding: 2rem 1rem;
    }
  }

  .header-top {
    align-items: flex-start;
    display: flex;
  }

  h2 {
    font-size: 3em;
    margin: 0;
    word-break: keep-all;
  }

  .pin {
    align-items: center;
    display: inline-flex;
    height: 70px;
    margin-left: 8px;
  }

  .baseline {
    margin-top: 1rem;
  }
</style>

<script>
  import { update } from 'db/RecentlyViewedDocs'

  class RecentDocSaver extends HTMLElement {
    constructor() {
      super()

      const description = this.attributes.getNamedItem('description')?.value ?? ''
      const title = this.attributes.getNamedItem('title')?.value ?? ''
      void update(title, description)
    }
  }
  customElements.define('recent-doc', RecentDocSaver)
</script>
