---
export type Props = {
  children: readonly (readonly [id: string, title: string])[]
  idNow: string
  parent: readonly [id: string, title: string] | null
  root: readonly [id: string, title: string] | null
  siblings: readonly (readonly [id: string, title: string])[]
}

const { children, idNow, parent, root, siblings } = Astro.props
const docNow = siblings.find(([id]) => id === idNow)
const docs = siblings.filter(([id]) => id !== idNow)
---

<section aria-labelledby="related-docs-heading">
  <h2 id="related-docs-heading">관련 문서</h2>
  {
    root && (
      <span class="arrowed parent">
        <a href={`/docs/${root[0]}`}>{root[1]}</a>
      </span>
    )
  }
  {
    parent && (
      <span class="arrowed parent">
        <a href={`/docs/${parent[0]}`}>{parent[1]}</a>
      </span>
    )
  }
  {docNow && <span class="arrowed current">{docNow[1]}</span>}
  {
    children.length > 0 && (
      <ul class="children">
        {children.map(([id, title]) => (
          <li class="arrowed child">
            <a href={`/docs/${id}`}>{title}</a>
          </li>
        ))}
      </ul>
    )
  }
  {
    docs.length > 0 && (
      <Fragment>
        <hr />
        <ul>
          {docs.map(([id, title]) => (
            <li>
              <a href={`/docs/${id}`}>{title}</a>
            </li>
          ))}
        </ul>
      </Fragment>
    )
  }
</section>

<style lang="scss">
  h2 {
    font-size: 18px;
    margin: 0;
  }

  ul {
    list-style: none;
    padding-left: 0;
  }

  li + li {
    margin-top: 0.5em;
  }

  .arrowed {
    display: flex;
    gap: 0.5em;
    margin: 1em 0;

    &::before {
      display: inline-block;
      text-align: center;
      width: 1em;
    }
  }

  .parent {
    &::before {
      content: '↑';
    }
  }

  .current {
    font-weight: 700;

    &::before {
      content: '-';
    }
  }

  .child::before {
    content: '↓';
  }
</style>
