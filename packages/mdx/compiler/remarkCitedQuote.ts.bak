import type { Extension as ASTExtension } from 'mdast-util-from-markdown'
import { MdxJsxTextElement } from 'mdast-util-mdx-jsx'
import type { Code, Extension as ParserExtension, State, Tokenizer } from 'micromark-util-types'
import type { Processor } from 'unified'
import type { Node } from 'unist'
import type { Text } from 'mdast'

const EFFECT_ROOT = 'cite'
const EFFECT_MARKER = 'citeMarker'
const EFFECT_LABEL_START = 'citeLabelStart'
const EFFECT_LABEL = 'citeLabel'
const EFFECT_LABEL_END = 'citeLabelEnd'
const EFFECT_URL_START = 'citeURLStart'
const EFFECT_URL = 'citeURL'
const EFFECT_URL_END = 'citeURLEnd'

function unexpectedEnd(code: Code): boolean {
  return code === null || code < -2
}

const tokenize: Tokenizer = (effects, ok, nok) => {
  const start: State = (code) => {
    if (code !== 45) {
      return nok(code)
    }

    effects.enter(EFFECT_ROOT)
    effects.enter(EFFECT_MARKER)

    return marker(code)
  }

  let markerPointer = 0
  const marker: State = (code) => {
    if (code !== 45) {
      return nok(code)
    }

    effects.consume(code)
    markerPointer++
    if (markerPointer < 2) {
      return marker
    }

    effects.exit(EFFECT_MARKER)
    return labelStart
  }

  const labelStart: State = (code) => {
    if (code !== '['.charCodeAt(0)) {
      return nok(code)
    }

    effects.enter(EFFECT_LABEL_START)
    effects.consume(code)
    effects.exit(EFFECT_LABEL_START)
    effects.enter(EFFECT_LABEL)
    return label
  }

  const label: State = (code) => {
    if (unexpectedEnd(code)) {
      return nok(code)
    }

    if (code === ']'.charCodeAt(0)) {
      effects.exit(EFFECT_LABEL)
      return labelEnd(code)
    }

    effects.consume(code)

    return label
  }

  const labelEnd: State = (code) => {
    effects.enter(EFFECT_LABEL_END)
    effects.consume(code)
    effects.exit(EFFECT_LABEL_END)

    return urlStart
  }

  const urlStart: State = (code) => {
    if (code !== '('.charCodeAt(0)) {
      effects.exit(EFFECT_ROOT)
      return ok(code)
    }

    effects.enter(EFFECT_URL_START)
    effects.consume(code)
    effects.exit(EFFECT_URL_START)
    effects.enter(EFFECT_URL)
    return url
  }

  const url: State = (code) => {
    if (unexpectedEnd(code)) {
      return nok(code)
    }

    if (code === ')'.charCodeAt(0)) {
      effects.exit(EFFECT_URL)
      return urlEnd(code)
    }

    effects.consume(code)
    return url
  }

  const urlEnd: State = (code) => {
    effects.enter(EFFECT_URL_END)
    effects.consume(code)
    effects.exit(EFFECT_URL_END)
    effects.exit(EFFECT_ROOT)

    return ok(code)
  }

  return start
}

const last = <A>(arr: A[]): A => arr[arr.length - 1]

const fromMarkdown: ASTExtension = {
  enter: {
    [EFFECT_ROOT]: function (token) {
      this.enter(
        {
          type: 'emphasis',
          children: [
            {
              type: 'text',
              value: '',
            },
          ],
          data: { hName: 'p', hProperties: { className: 'cite' } },
        },
        token,
      )
    },
  },
  exit: {
    [EFFECT_LABEL]: function (token) {
      const current = last(this.stack) as MdxJsxTextElement
      const children = current.children[0] as Text
      children.value = this.sliceSerialize(token)
    },
    [EFFECT_URL]: function (token) {
      const current = last(this.stack) as MdxJsxTextElement
      const children = current.children[0] as Text
      current.children = [
        {
          children: [{
            type: 'text',
            value: children.value,
          }],
          type: 'link',
          url: this.sliceSerialize(token)
        }
      ]
    },
    [EFFECT_ROOT]: function (token) {
      this.exit(token)
    },
  },
}

const syntax: ParserExtension = {
  flow: {
    45: { name: 'cite', tokenize },
  },
}

function remarkCitedQuote(this: Processor<void, Node>): void {
  const data = this.data() as Record<string, unknown[]>

  function add(field: string, value: unknown): void {
    if (data[field]) {
      data[field].push(value)
    } else {
      data[field] = [value]
    }
  }

  add('micromarkExtensions', syntax)
  add('fromMarkdownExtensions', fromMarkdown)
}

export { remarkCitedQuote }
